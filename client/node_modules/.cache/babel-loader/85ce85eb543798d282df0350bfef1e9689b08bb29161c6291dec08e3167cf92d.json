{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil\\\\Documents\\\\College\\\\Software Development\\\\fakeStackOverflow\\\\fakeStackOverflow\\\\client\\\\src\\\\components\\\\commentSection.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Vote from \"./voteMechanism\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CommentSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.comment = () => {\n      if (this.state.value.length === 0) {\n        // console.log(\"Nothing to submit.\");\n        document.getElementById(\"commentErr\").textContent = \"Nothing Inputted\";\n        return;\n      }\n      // console.log(this.state.id);\n      // console.log(\"SUBMITTED: \" + this.state.value);\n      // let username = localStorage.getItem(\"username\");\n      let username = Cookies.get(\"user\");\n      let data = {\n        id: this.state.id,\n        value: this.state.value,\n        username: username\n      };\n\n      // console.log(data);\n      let func = this.props.showError;\n      axios.post(\"http://127.0.0.1:8000/comment/post\", data).then(res => {\n        if (res.data === \"TRY AGAIN\") {\n          document.getElementById(\"commentErr\").textContent = \"*Unable to comment. Please try again.\";\n          // return;\n        } else if (res.data === \"USER REPUTATION\") {\n          document.getElementById(\"commentErr\").textContent = \"*Your reputation is not good. Must be reputation > 50 to comment.\";\n        } else if (res.data === \"COMMENT LENGTH\") {\n          document.getElementById(\"commentErr\").textContent = \"*Comment must be less than 140 characters. Try again.\";\n        } else {\n          document.getElementById(\"commentErr\").textContent = \"\";\n        }\n\n        // console.log(\"SUBMITTED: \" + this.state.value);\n        // this.state.comments.push(this.state.value);\n        // this.props.rerender();\n\n        this.setState({\n          value: \"\",\n          rerender: true\n        });\n        // this.forceUpdate();\n      }).catch(function (error) {\n        func();\n      });\n    };\n    this.handleChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n      // this.state.value = e.target.value;\n    };\n    this.state = {\n      id: props.id,\n      value: \"\",\n      comments: [],\n      // commentsBatches: [],\n      commentsBatchIdx: 0,\n      // commentsActivity: 0,\n      rerender: true\n    };\n\n    // this.state = {\n    //   id: props.id,\n    //   value: \"\",\n    //   comments: [],\n    //   // commentsBatches: [],\n    //   commentsBatchIdx: 0,\n    //   // commentsActivity: 0,\n    // };\n\n    this.commentBatches = [];\n    this.commentsBatchIdx = 0;\n    this.commentsActivity = 0;\n    this.comment = this.comment.bind(this);\n    this.prevComment = this.prevComment.bind(this);\n    this.nextComment = this.nextComment.bind(this);\n  }\n  childDemandsRerender() {\n    this.setState({\n      rerender: true\n    });\n    // this.forceUpdate();\n  }\n  componentDidMount() {\n    if (!this.state.rerender) return;\n    let id = this.props.id;\n    axios.get(\"http://127.0.0.1:8000/comments/get/\" + id).then(res => {\n      // this.setState({ comments: res.data });\n      // let data = res.data;\n      // console.log(data);\n\n      this.setState({\n        id: this.props.id,\n        value: \"\",\n        comments: res.data.comments.reverse(),\n        // commentsBatches: [],\n        commentsBatchIdx: 0,\n        rerender: false\n        // commentsActivity: 0,\n      });\n    }).catch(err => {\n      // this.state = {\n      //   id: props.id,\n      //   value: \"\",\n      //   comments: [],\n      //   // commentsBatches: [],\n      //   commentsBatchIdx: 0,\n      //   // commentsActivity: 0,\n      // };\n    });\n  }\n  formBatches() {\n    let comments = this.state.comments;\n    // console.log(this.state.comments);\n    let numBatches = Math.ceil(comments.length / 3);\n    let commentsBatches = [];\n    if (numBatches > 0) {\n      let idx = 0;\n      for (let i = 0; i < numBatches; i++) {\n        let batch = [];\n        for (let j = 0; j < 3 && idx < comments.length; j++) {\n          batch.push(comments[idx++]);\n        }\n        commentsBatches.push(batch);\n      }\n    }\n\n    // this.state.commentsBatches = commentsBatches;\n    this.commentsBatches = commentsBatches;\n    // console.log(commentsBatches);\n  }\n  getCorrectCommentBatch() {\n    //activities: 0 means current batch, 1 means previous if any, 2 means next if any\n    // let activity = this.state.commentsActivity;\n    let activity = this.commentsActivity;\n    // this.state.activity = 0;\n    this.activity = 0;\n    // let currBatchIdx = this.state.commentsBatchIdx;\n    let currBatchIdx = this.commentsBatchIdx;\n    // let maxBatchIdx = this.state.commentsBatches.length - 1;\n    let maxBatchIdx = this.commentsBatches.length - 1;\n    if (maxBatchIdx < 0) maxBatchIdx = 0;\n    if (activity === 0 || activity === 1 && currBatchIdx === 0) {\n      // return this.state.commentsBatches[currBatchIdx];\n      return this.commentsBatches[currBatchIdx];\n    } else if (activity === 1) {\n      --currBatchIdx;\n    } else if (activity === 2 && currBatchIdx === maxBatchIdx) {\n      currBatchIdx = 0;\n      // this.state.commentsBatchIdx = currBatchIdx;\n      this.commentsBatchIdx = currBatchIdx;\n    } else if (activity === 2) {\n      ++currBatchIdx;\n    }\n\n    // return this.state.commentsBatches[currBatchIdx];\n    // this.setState({ commentsBatchIdx: currBatchIdx });\n    this.commentsBatchIdx = currBatchIdx;\n    this.setState({\n      rerender: false\n    });\n    // this.forceUpdate();\n  }\n  prevComment() {\n    // this.state.needRequest = false;\n    // this.state.commentsActivity = 1;\n    this.commentsActivity = 1;\n    this.getCorrectCommentBatch();\n  }\n  nextComment() {\n    // this.state.needRequest = false;\n    // this.state.commentsActivity = 2;\n    this.commentsActivity = 2;\n    this.getCorrectCommentBatch();\n  }\n  render() {\n    if (this.state.rerender) this.componentDidMount();\n    // let isLoggedIn = localStorage.getItem(\"isLoggedIn\"); //WONT NEED THIS AFTER SESSIONS\n    // if(this.state.comments.length > 0) console.log(this.state.comments);\n    let isLoggedIn = Cookies.get(\"user\");\n    // let comments = this.props.comments;\n    this.formBatches();\n    let comments = [];\n    // let commentsBatches = this.state.commentsBatches;\n    let commentsBatches = this.commentsBatches;\n    if (commentsBatches !== undefined) comments = commentsBatches[this.commentsBatchIdx];\n    // comments = commentsBatches[this.state.commentsBatchIdx];\n    // let comments = this.state.commentBatches[this.state.commentsBatchIdx];\n    // console.log(\"COMMENTS: \");\n    // console.log(comments);\n    // console.log(\"________\");\n    let commentComponents = [];\n    if (comments === undefined || comments.length === 0) {\n      if (isLoggedIn) commentComponents = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No comments. Be the first to comment!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }, this);else commentComponents = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No comments. Login & Be the first to comment!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this);\n    } else {\n      for (let i = 0; i < comments.length; i++) {\n        commentComponents.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"comment\",\n            children: comments[i].comment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"postedByComment\",\n            children: [\" \", \"posted by \", /*#__PURE__*/_jsxDEV(\"span\", {\n              id: \"cUser\",\n              children: comments[i].username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Vote, {\n            votes: comments[i].votes,\n            objId: comments[i].cid,\n            rerender: this.childDemandsRerender,\n            showError: this.props.showError,\n            comment: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this));\n      }\n    }\n\n    // console.log(this.state.comments);\n    // console.log(comments);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), this.state.comments.length > 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"batchSection\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reglogbuttonComment\",\n          onClick: this.prevComment,\n          children: \"Previous Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"batchIdx\",\n          children: [\"Page \", this.commentsBatchIdx + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reglogbuttonComment\",\n          onClick: this.nextComment,\n          children: \"Next Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"commentHeader\",\n        children: \"Comments:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: commentComponents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.value,\n              onChange: this.handleChange,\n              className: \"askQCommentForm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: \"cBtn\",\n            onClick: this.comment,\n            children: \"Post Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"commentErr\",\n          style: {\n            fontSize: \"30px\",\n            color: \"red\",\n            fontStyle: \"italic\",\n            marginTop: \"1%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","axios","Cookies","Vote","jsxDEV","_jsxDEV","CommentSection","Component","constructor","props","comment","state","value","length","document","getElementById","textContent","username","get","data","id","func","showError","post","then","res","setState","rerender","catch","error","handleChange","e","target","comments","commentsBatchIdx","commentBatches","commentsActivity","bind","prevComment","nextComment","childDemandsRerender","componentDidMount","reverse","err","formBatches","numBatches","Math","ceil","commentsBatches","idx","i","batch","j","push","getCorrectCommentBatch","activity","currBatchIdx","maxBatchIdx","render","isLoggedIn","undefined","commentComponents","children","fileName","_jsxFileName","lineNumber","columnNumber","className","votes","objId","cid","onClick","onSubmit","handleSubmit","type","onChange","style","fontSize","color","fontStyle","marginTop"],"sources":["C:/Users/sahil/Documents/College/Software Development/fakeStackOverflow/fakeStackOverflow/client/src/components/commentSection.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"js-cookie\";\r\nimport Vote from \"./voteMechanism\";\r\n\r\nexport default class CommentSection extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: props.id,\r\n      value: \"\",\r\n      comments: [],\r\n      // commentsBatches: [],\r\n      commentsBatchIdx: 0,\r\n      // commentsActivity: 0,\r\n      rerender: true,\r\n    };\r\n\r\n    // this.state = {\r\n    //   id: props.id,\r\n    //   value: \"\",\r\n    //   comments: [],\r\n    //   // commentsBatches: [],\r\n    //   commentsBatchIdx: 0,\r\n    //   // commentsActivity: 0,\r\n    // };\r\n\r\n    this.commentBatches = [];\r\n    this.commentsBatchIdx = 0;\r\n    this.commentsActivity = 0;\r\n\r\n    this.comment = this.comment.bind(this);\r\n    this.prevComment = this.prevComment.bind(this);\r\n    this.nextComment = this.nextComment.bind(this);\r\n  }\r\n\r\n  childDemandsRerender() {\r\n    this.setState({ rerender: true });\r\n    // this.forceUpdate();\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.state.rerender) return;\r\n    let id = this.props.id;\r\n    axios\r\n      .get(\"http://127.0.0.1:8000/comments/get/\" + id)\r\n      .then((res) => {\r\n        // this.setState({ comments: res.data });\r\n        // let data = res.data;\r\n        // console.log(data);\r\n\r\n        this.setState({\r\n          id: this.props.id,\r\n          value: \"\",\r\n          comments: res.data.comments.reverse(),\r\n          // commentsBatches: [],\r\n          commentsBatchIdx: 0,\r\n          rerender: false,\r\n          // commentsActivity: 0,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        // this.state = {\r\n        //   id: props.id,\r\n        //   value: \"\",\r\n        //   comments: [],\r\n        //   // commentsBatches: [],\r\n        //   commentsBatchIdx: 0,\r\n        //   // commentsActivity: 0,\r\n        // };\r\n      });\r\n  }\r\n\r\n  comment = () => {\r\n    if (this.state.value.length === 0) {\r\n      // console.log(\"Nothing to submit.\");\r\n      document.getElementById(\"commentErr\").textContent = \"Nothing Inputted\";\r\n      return;\r\n    }\r\n    // console.log(this.state.id);\r\n    // console.log(\"SUBMITTED: \" + this.state.value);\r\n    // let username = localStorage.getItem(\"username\");\r\n    let username = Cookies.get(\"user\");\r\n    let data = {\r\n      id: this.state.id,\r\n      value: this.state.value,\r\n      username: username,\r\n    };\r\n\r\n    // console.log(data);\r\n    let func = this.props.showError;\r\n    axios\r\n      .post(\"http://127.0.0.1:8000/comment/post\", data)\r\n      .then((res) => {\r\n        if (res.data === \"TRY AGAIN\") {\r\n          document.getElementById(\"commentErr\").textContent =\r\n            \"*Unable to comment. Please try again.\";\r\n          // return;\r\n        } else if (res.data === \"USER REPUTATION\") {\r\n          document.getElementById(\"commentErr\").textContent =\r\n            \"*Your reputation is not good. Must be reputation > 50 to comment.\";\r\n        } else if (res.data === \"COMMENT LENGTH\") {\r\n          document.getElementById(\"commentErr\").textContent =\r\n            \"*Comment must be less than 140 characters. Try again.\";\r\n        } else {\r\n          document.getElementById(\"commentErr\").textContent = \"\";\r\n        }\r\n\r\n        // console.log(\"SUBMITTED: \" + this.state.value);\r\n        // this.state.comments.push(this.state.value);\r\n        // this.props.rerender();\r\n\r\n        this.setState({ value: \"\", rerender: true });\r\n        // this.forceUpdate();\r\n      })\r\n      .catch(function (error) {\r\n        func();\r\n      });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ value: e.target.value });\r\n    // this.state.value = e.target.value;\r\n  };\r\n\r\n  formBatches() {\r\n    let comments = this.state.comments;\r\n    // console.log(this.state.comments);\r\n    let numBatches = Math.ceil(comments.length / 3);\r\n    let commentsBatches = [];\r\n    if (numBatches > 0) {\r\n      let idx = 0;\r\n      for (let i = 0; i < numBatches; i++) {\r\n        let batch = [];\r\n\r\n        for (let j = 0; j < 3 && idx < comments.length; j++) {\r\n          batch.push(comments[idx++]);\r\n        }\r\n\r\n        commentsBatches.push(batch);\r\n      }\r\n    }\r\n\r\n    // this.state.commentsBatches = commentsBatches;\r\n    this.commentsBatches = commentsBatches;\r\n    // console.log(commentsBatches);\r\n  }\r\n\r\n  getCorrectCommentBatch() {\r\n    //activities: 0 means current batch, 1 means previous if any, 2 means next if any\r\n    // let activity = this.state.commentsActivity;\r\n    let activity = this.commentsActivity;\r\n    // this.state.activity = 0;\r\n    this.activity = 0;\r\n    // let currBatchIdx = this.state.commentsBatchIdx;\r\n    let currBatchIdx = this.commentsBatchIdx;\r\n    // let maxBatchIdx = this.state.commentsBatches.length - 1;\r\n    let maxBatchIdx = this.commentsBatches.length - 1;\r\n    if (maxBatchIdx < 0) maxBatchIdx = 0;\r\n    if (activity === 0 || (activity === 1 && currBatchIdx === 0)) {\r\n      // return this.state.commentsBatches[currBatchIdx];\r\n      return this.commentsBatches[currBatchIdx];\r\n    } else if (activity === 1) {\r\n      --currBatchIdx;\r\n    } else if (activity === 2 && currBatchIdx === maxBatchIdx) {\r\n      currBatchIdx = 0;\r\n      // this.state.commentsBatchIdx = currBatchIdx;\r\n      this.commentsBatchIdx = currBatchIdx;\r\n    } else if (activity === 2) {\r\n      ++currBatchIdx;\r\n    }\r\n\r\n    // return this.state.commentsBatches[currBatchIdx];\r\n    // this.setState({ commentsBatchIdx: currBatchIdx });\r\n    this.commentsBatchIdx = currBatchIdx;\r\n    this.setState({ rerender: false });\r\n    // this.forceUpdate();\r\n  }\r\n\r\n  prevComment() {\r\n    // this.state.needRequest = false;\r\n    // this.state.commentsActivity = 1;\r\n    this.commentsActivity = 1;\r\n    this.getCorrectCommentBatch();\r\n  }\r\n\r\n  nextComment() {\r\n    // this.state.needRequest = false;\r\n    // this.state.commentsActivity = 2;\r\n    this.commentsActivity = 2;\r\n    this.getCorrectCommentBatch();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.rerender) this.componentDidMount();\r\n    // let isLoggedIn = localStorage.getItem(\"isLoggedIn\"); //WONT NEED THIS AFTER SESSIONS\r\n    // if(this.state.comments.length > 0) console.log(this.state.comments);\r\n    let isLoggedIn = Cookies.get(\"user\");\r\n    // let comments = this.props.comments;\r\n    this.formBatches();\r\n    let comments = [];\r\n    // let commentsBatches = this.state.commentsBatches;\r\n    let commentsBatches = this.commentsBatches;\r\n    if (commentsBatches !== undefined)\r\n      comments = commentsBatches[this.commentsBatchIdx];\r\n    // comments = commentsBatches[this.state.commentsBatchIdx];\r\n    // let comments = this.state.commentBatches[this.state.commentsBatchIdx];\r\n    // console.log(\"COMMENTS: \");\r\n    // console.log(comments);\r\n    // console.log(\"________\");\r\n    let commentComponents = [];\r\n    if (comments === undefined || comments.length === 0) {\r\n      if (isLoggedIn)\r\n        commentComponents = <h1>No comments. Be the first to comment!</h1>;\r\n      else\r\n        commentComponents = (\r\n          <h1>No comments. Login & Be the first to comment!</h1>\r\n        );\r\n    } else {\r\n      for (let i = 0; i < comments.length; i++) {\r\n        commentComponents.push(\r\n          <div key={i} className={\"comment\"}>\r\n            <span id=\"comment\">{comments[i].comment}</span>\r\n            <span id=\"postedByComment\">\r\n              {\" \"}\r\n              posted by <span id=\"cUser\">{comments[i].username}</span>\r\n            </span>\r\n            <Vote\r\n              votes={comments[i].votes}\r\n              objId={comments[i].cid}\r\n              rerender={this.childDemandsRerender}\r\n              showError={this.props.showError}\r\n              comment={true}\r\n            ></Vote>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    // console.log(this.state.comments);\r\n    // console.log(comments);\r\n\r\n    return (\r\n      <div>\r\n        <br />\r\n        {/* {this.state.comments.length > 3 && ( */}\r\n        {this.state.comments.length > 3 && (\r\n          <div className=\"batchSection\">\r\n            <button className=\"reglogbuttonComment\" onClick={this.prevComment}>\r\n              Previous Comments\r\n            </button>\r\n            {/* <span id=\"batchIdx\">Page {this.state.commentsBatchIdx + 1}</span> */}\r\n            <span id=\"batchIdx\">Page {this.commentsBatchIdx + 1}</span>\r\n            <button className=\"reglogbuttonComment\" onClick={this.nextComment}>\r\n              Next Comments\r\n            </button>\r\n          </div>\r\n        )}\r\n        <h1 id=\"commentHeader\">Comments:</h1>\r\n        <br></br>\r\n        <div>{commentComponents}</div>\r\n\r\n        {isLoggedIn && (\r\n          <span>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={this.state.value}\r\n                  onChange={this.handleChange}\r\n                  className=\"askQCommentForm\"\r\n                />\r\n                {/* <input type=\"text\" value={this.state.value} /> */}\r\n              </label>\r\n              <button type=\"submit\" id=\"cBtn\" onClick={this.comment}>\r\n                Post Comment\r\n              </button>\r\n            </form>\r\n            <div\r\n              id=\"commentErr\"\r\n              style={{\r\n                fontSize: \"30px\",\r\n                color: \"red\",\r\n                fontStyle: \"italic\",\r\n                marginTop: \"1%\",\r\n              }}\r\n            ></div>\r\n          </span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,IAAI,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,eAAe,MAAMC,cAAc,SAASN,KAAK,CAACO,SAAS,CAAC;EAC1DC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAkEfC,OAAO,GAAG,MAAM;MACd,IAAI,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;QACjC;QACAC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,WAAW,GAAG,kBAAkB;QACtE;MACF;MACA;MACA;MACA;MACA,IAAIC,QAAQ,GAAGf,OAAO,CAACgB,GAAG,CAAC,MAAM,CAAC;MAClC,IAAIC,IAAI,GAAG;QACTC,EAAE,EAAE,IAAI,CAACT,KAAK,CAACS,EAAE;QACjBR,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAK;QACvBK,QAAQ,EAAEA;MACZ,CAAC;;MAED;MACA,IAAII,IAAI,GAAG,IAAI,CAACZ,KAAK,CAACa,SAAS;MAC/BrB,KAAK,CACFsB,IAAI,CAAC,oCAAoC,EAAEJ,IAAI,CAAC,CAChDK,IAAI,CAAEC,GAAG,IAAK;QACb,IAAIA,GAAG,CAACN,IAAI,KAAK,WAAW,EAAE;UAC5BL,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,WAAW,GAC/C,uCAAuC;UACzC;QACF,CAAC,MAAM,IAAIS,GAAG,CAACN,IAAI,KAAK,iBAAiB,EAAE;UACzCL,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,WAAW,GAC/C,mEAAmE;QACvE,CAAC,MAAM,IAAIS,GAAG,CAACN,IAAI,KAAK,gBAAgB,EAAE;UACxCL,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,WAAW,GAC/C,uDAAuD;QAC3D,CAAC,MAAM;UACLF,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,WAAW,GAAG,EAAE;QACxD;;QAEA;QACA;QACA;;QAEA,IAAI,CAACU,QAAQ,CAAC;UAAEd,KAAK,EAAE,EAAE;UAAEe,QAAQ,EAAE;QAAK,CAAC,CAAC;QAC5C;MACF,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUC,KAAK,EAAE;QACtBR,IAAI,CAAC,CAAC;MACR,CAAC,CAAC;IACN,CAAC;IAAA,KAEDS,YAAY,GAAIC,CAAC,IAAK;MACpB,IAAI,CAACL,QAAQ,CAAC;QAAEd,KAAK,EAAEmB,CAAC,CAACC,MAAM,CAACpB;MAAM,CAAC,CAAC;MACxC;IACF,CAAC;IAnHC,IAAI,CAACD,KAAK,GAAG;MACXS,EAAE,EAAEX,KAAK,CAACW,EAAE;MACZR,KAAK,EAAE,EAAE;MACTqB,QAAQ,EAAE,EAAE;MACZ;MACAC,gBAAgB,EAAE,CAAC;MACnB;MACAP,QAAQ,EAAE;IACZ,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAI,CAACQ,cAAc,GAAG,EAAE;IACxB,IAAI,CAACD,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACE,gBAAgB,GAAG,CAAC;IAEzB,IAAI,CAAC1B,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC2B,IAAI,CAAC,IAAI,CAAC;IACtC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACA,WAAW,CAACD,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACE,WAAW,GAAG,IAAI,CAACA,WAAW,CAACF,IAAI,CAAC,IAAI,CAAC;EAChD;EAEAG,oBAAoBA,CAAA,EAAG;IACrB,IAAI,CAACd,QAAQ,CAAC;MAAEC,QAAQ,EAAE;IAAK,CAAC,CAAC;IACjC;EACF;EAEAc,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAAC,IAAI,CAAC9B,KAAK,CAACgB,QAAQ,EAAE;IAC1B,IAAIP,EAAE,GAAG,IAAI,CAACX,KAAK,CAACW,EAAE;IACtBnB,KAAK,CACFiB,GAAG,CAAC,qCAAqC,GAAGE,EAAE,CAAC,CAC/CI,IAAI,CAAEC,GAAG,IAAK;MACb;MACA;MACA;;MAEA,IAAI,CAACC,QAAQ,CAAC;QACZN,EAAE,EAAE,IAAI,CAACX,KAAK,CAACW,EAAE;QACjBR,KAAK,EAAE,EAAE;QACTqB,QAAQ,EAAER,GAAG,CAACN,IAAI,CAACc,QAAQ,CAACS,OAAO,CAAC,CAAC;QACrC;QACAR,gBAAgB,EAAE,CAAC;QACnBP,QAAQ,EAAE;QACV;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,CACDC,KAAK,CAAEe,GAAG,IAAK;MACd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACD,CAAC;EACN;EAsDAC,WAAWA,CAAA,EAAG;IACZ,IAAIX,QAAQ,GAAG,IAAI,CAACtB,KAAK,CAACsB,QAAQ;IAClC;IACA,IAAIY,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACd,QAAQ,CAACpB,MAAM,GAAG,CAAC,CAAC;IAC/C,IAAImC,eAAe,GAAG,EAAE;IACxB,IAAIH,UAAU,GAAG,CAAC,EAAE;MAClB,IAAII,GAAG,GAAG,CAAC;MACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,EAAEK,CAAC,EAAE,EAAE;QACnC,IAAIC,KAAK,GAAG,EAAE;QAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,IAAIH,GAAG,GAAGhB,QAAQ,CAACpB,MAAM,EAAEuC,CAAC,EAAE,EAAE;UACnDD,KAAK,CAACE,IAAI,CAACpB,QAAQ,CAACgB,GAAG,EAAE,CAAC,CAAC;QAC7B;QAEAD,eAAe,CAACK,IAAI,CAACF,KAAK,CAAC;MAC7B;IACF;;IAEA;IACA,IAAI,CAACH,eAAe,GAAGA,eAAe;IACtC;EACF;EAEAM,sBAAsBA,CAAA,EAAG;IACvB;IACA;IACA,IAAIC,QAAQ,GAAG,IAAI,CAACnB,gBAAgB;IACpC;IACA,IAAI,CAACmB,QAAQ,GAAG,CAAC;IACjB;IACA,IAAIC,YAAY,GAAG,IAAI,CAACtB,gBAAgB;IACxC;IACA,IAAIuB,WAAW,GAAG,IAAI,CAACT,eAAe,CAACnC,MAAM,GAAG,CAAC;IACjD,IAAI4C,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAG,CAAC;IACpC,IAAIF,QAAQ,KAAK,CAAC,IAAKA,QAAQ,KAAK,CAAC,IAAIC,YAAY,KAAK,CAAE,EAAE;MAC5D;MACA,OAAO,IAAI,CAACR,eAAe,CAACQ,YAAY,CAAC;IAC3C,CAAC,MAAM,IAAID,QAAQ,KAAK,CAAC,EAAE;MACzB,EAAEC,YAAY;IAChB,CAAC,MAAM,IAAID,QAAQ,KAAK,CAAC,IAAIC,YAAY,KAAKC,WAAW,EAAE;MACzDD,YAAY,GAAG,CAAC;MAChB;MACA,IAAI,CAACtB,gBAAgB,GAAGsB,YAAY;IACtC,CAAC,MAAM,IAAID,QAAQ,KAAK,CAAC,EAAE;MACzB,EAAEC,YAAY;IAChB;;IAEA;IACA;IACA,IAAI,CAACtB,gBAAgB,GAAGsB,YAAY;IACpC,IAAI,CAAC9B,QAAQ,CAAC;MAAEC,QAAQ,EAAE;IAAM,CAAC,CAAC;IAClC;EACF;EAEAW,WAAWA,CAAA,EAAG;IACZ;IACA;IACA,IAAI,CAACF,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACkB,sBAAsB,CAAC,CAAC;EAC/B;EAEAf,WAAWA,CAAA,EAAG;IACZ;IACA;IACA,IAAI,CAACH,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACkB,sBAAsB,CAAC,CAAC;EAC/B;EAEAI,MAAMA,CAAA,EAAG;IACP,IAAI,IAAI,CAAC/C,KAAK,CAACgB,QAAQ,EAAE,IAAI,CAACc,iBAAiB,CAAC,CAAC;IACjD;IACA;IACA,IAAIkB,UAAU,GAAGzD,OAAO,CAACgB,GAAG,CAAC,MAAM,CAAC;IACpC;IACA,IAAI,CAAC0B,WAAW,CAAC,CAAC;IAClB,IAAIX,QAAQ,GAAG,EAAE;IACjB;IACA,IAAIe,eAAe,GAAG,IAAI,CAACA,eAAe;IAC1C,IAAIA,eAAe,KAAKY,SAAS,EAC/B3B,QAAQ,GAAGe,eAAe,CAAC,IAAI,CAACd,gBAAgB,CAAC;IACnD;IACA;IACA;IACA;IACA;IACA,IAAI2B,iBAAiB,GAAG,EAAE;IAC1B,IAAI5B,QAAQ,KAAK2B,SAAS,IAAI3B,QAAQ,CAACpB,MAAM,KAAK,CAAC,EAAE;MACnD,IAAI8C,UAAU,EACZE,iBAAiB,gBAAGxD,OAAA;QAAAyD,QAAA,EAAI;MAAqC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,CAAC,KAEnEL,iBAAiB,gBACfxD,OAAA;QAAAyD,QAAA,EAAI;MAA6C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CACtD;IACL,CAAC,MAAM;MACL,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,QAAQ,CAACpB,MAAM,EAAEqC,CAAC,EAAE,EAAE;QACxCW,iBAAiB,CAACR,IAAI,eACpBhD,OAAA;UAAa8D,SAAS,EAAE,SAAU;UAAAL,QAAA,gBAChCzD,OAAA;YAAMe,EAAE,EAAC,SAAS;YAAA0C,QAAA,EAAE7B,QAAQ,CAACiB,CAAC,CAAC,CAACxC;UAAO;YAAAqD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC/C7D,OAAA;YAAMe,EAAE,EAAC,iBAAiB;YAAA0C,QAAA,GACvB,GAAG,EAAC,YACK,eAAAzD,OAAA;cAAMe,EAAE,EAAC,OAAO;cAAA0C,QAAA,EAAE7B,QAAQ,CAACiB,CAAC,CAAC,CAACjC;YAAQ;cAAA8C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC,eACP7D,OAAA,CAACF,IAAI;YACHiE,KAAK,EAAEnC,QAAQ,CAACiB,CAAC,CAAC,CAACkB,KAAM;YACzBC,KAAK,EAAEpC,QAAQ,CAACiB,CAAC,CAAC,CAACoB,GAAI;YACvB3C,QAAQ,EAAE,IAAI,CAACa,oBAAqB;YACpClB,SAAS,EAAE,IAAI,CAACb,KAAK,CAACa,SAAU;YAChCZ,OAAO,EAAE;UAAK;YAAAqD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA,GAZAhB,CAAC;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaN,CACP,CAAC;MACH;IACF;;IAEA;IACA;;IAEA,oBACE7D,OAAA;MAAAyD,QAAA,gBACEzD,OAAA;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAEL,IAAI,CAACvD,KAAK,CAACsB,QAAQ,CAACpB,MAAM,GAAG,CAAC,iBAC7BR,OAAA;QAAK8D,SAAS,EAAC,cAAc;QAAAL,QAAA,gBAC3BzD,OAAA;UAAQ8D,SAAS,EAAC,qBAAqB;UAACI,OAAO,EAAE,IAAI,CAACjC,WAAY;UAAAwB,QAAA,EAAC;QAEnE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAET7D,OAAA;UAAMe,EAAE,EAAC,UAAU;UAAA0C,QAAA,GAAC,OAAK,EAAC,IAAI,CAAC5B,gBAAgB,GAAG,CAAC;QAAA;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3D7D,OAAA;UAAQ8D,SAAS,EAAC,qBAAqB;UAACI,OAAO,EAAE,IAAI,CAAChC,WAAY;UAAAuB,QAAA,EAAC;QAEnE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN,eACD7D,OAAA;QAAIe,EAAE,EAAC,eAAe;QAAA0C,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrC7D,OAAA;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT7D,OAAA;QAAAyD,QAAA,EAAMD;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAE7BP,UAAU,iBACTtD,OAAA;QAAAyD,QAAA,gBACEzD,OAAA;UAAMmE,QAAQ,EAAE,IAAI,CAACC,YAAa;UAAAX,QAAA,gBAChCzD,OAAA;YAAAyD,QAAA,eACEzD,OAAA;cACEqE,IAAI,EAAC,MAAM;cACX9D,KAAK,EAAE,IAAI,CAACD,KAAK,CAACC,KAAM;cACxB+D,QAAQ,EAAE,IAAI,CAAC7C,YAAa;cAC5BqC,SAAS,EAAC;YAAiB;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEG,CAAC,eACR7D,OAAA;YAAQqE,IAAI,EAAC,QAAQ;YAACtD,EAAE,EAAC,MAAM;YAACmD,OAAO,EAAE,IAAI,CAAC7D,OAAQ;YAAAoD,QAAA,EAAC;UAEvD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACP7D,OAAA;UACEe,EAAE,EAAC,YAAY;UACfwD,KAAK,EAAE;YACLC,QAAQ,EAAE,MAAM;YAChBC,KAAK,EAAE,KAAK;YACZC,SAAS,EAAE,QAAQ;YACnBC,SAAS,EAAE;UACb;QAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}